##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.vars.node_name }}-generate-certs
  namespace: {{ .Values.metadata.namespace }}
  labels:
    app: {{ .Values.vars.node_name }}-generate-certs
    app.kubernetes.io/name: {{ .Values.vars.node_name }}-generate-certs
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
    backoffLimit: 6
    template:
      metadata:
        labels:
          app: {{ .Values.vars.node_name }}-generate-certs
          app.kubernetes.io/name: {{ .Values.vars.node_name }}-generate-certs
          app.kubernetes.io/instance: {{ .Release.Name }}
      spec:
        restartPolicy: "OnFailure"
        serviceAccountName: {{ $.Values.vault.serviceaccountname }}        
        securityContext:
          fsGroup: 1000
        initContainers:
        - name: init-check-certificates
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: IfNotPresent
          env:
            - name: VAULT_ADDR
              value: {{ $.Values.vault.address }}
            - name: VAULT_APP_ROLE
              value: {{.Values.vault.role}}
            - name: KUBERNETES_AUTH_PATH
              value: {{ $.Values.vault.authpath }}
            - name: CERTS_SECRET_PREFIX
              value: {{ $.Values.vault.certsecretprefix }}
            - name: MOUNT_PATH
              value: "/certcheck"
          command: ["sh", "-c"]
          args:
          - |-
              #!/usr/bin/env sh
              validateVaultResponse () {
                if echo ${2} | grep "errors"; then
                  echo "ERROR: unable to retrieve ${1}: ${2}"
                  exit 1
                fi
                if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
                then
                  http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                  --header "X-Vault-Token: ${VAULT_TOKEN}" \
                  ${VAULT_ADDR}/v1/${1})
                  curl_response=$?
                  if test "$http_code" != "200" ; then
                      echo "Http response code from Vault - $http_code and curl_response - $curl_response"
                      if test "$curl_response" != "0"; then
                        echo "Error: curl command failed with error code - $curl_response"
                        exit 1
                      fi
                  fi
                fi
              }
              # Setting up the environment to get secrets/certificates from Vault
              echo "Getting secrets/certificates from Vault server"
              KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
              validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
              echo "Logged into Vault"
              mkdir -p ${MOUNT_PATH}
              echo ${VAULT_TOKEN}
              echo ${VAULT_ADDR}
              echo ${CERTS_SECRET_PREFIX}           
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/crypto/{{ .Values.vars.node_name }}/certs | jq -r 'if .errors then . else . end')
              echo ${LOOKUP_SECRET_RESPONSE}
              data_info="$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["rootCA"]')"
              echo ${data_info}
              if [ "$data_info" == "null" ]           
              then
                echo "Certficates absent in vault. Ignore error warning"
                touch ${MOUNT_PATH}/absent.txt
              else
                validateVaultResponse "${CERTS_SECRET_PREFIX}/certs" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                echo "Certificates present in vault"
                touch ${MOUNT_PATH}/present.txt
              fi 
              echo "Done checking for certificates in vault"
              tail -f /dev/null
          volumeMounts:
          - name: credentials
            mountPath: /DATA
          - name: certcheck
            mountPath: /certcheck
          